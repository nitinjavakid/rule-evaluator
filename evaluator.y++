%{
#include <stdio.h>
#include "evaluator.h"
int yylex(void);
void yyerror(const char *);

%}

%define api.value.type union
%token <int> NUM
%token <sym_rec_t *> VAR FUNC
%type  <int> expr

%left OR
%left AND
%right NOT
%left LT GT EQ LE GE
%left '-' '+'
%left '*' '/'

%%

input:
  %empty
| input line
;

line:
  '\n'
| expr '\n'  { printf ("%d\n", $1); }
;

expr:
  NUM             { $$ = $1;                 }
| VAR             { $$ = $1->u.var;          }
| VAR '=' expr    { $$ = $3; $1->u.var = $3; }
| expr '+' expr   { $$ = $1 + $3;            }
| expr '-' expr   { $$ = $1 - $3;            }
| expr '/' expr   { $$ = $1 / $3;            }
| expr '*' expr   { $$ = $1 * $3;            }
| expr LE expr    { $$ = $1 <= $3;           }
| expr GE expr    { $$ = $1 >= $3;           }
| expr LT expr    { $$ = $1 < $3;            }
| expr GT expr    { $$ = $1 > $3;            }
| expr EQ expr    { $$ = $1 == $3;           }
| expr OR expr    { $$ = $1 || $3;           }
| expr AND expr   { $$ = $1 && $3;           }
| NOT expr        { $$ = !$2;                }
| '(' expr ')'    { $$ = $2;                 }
;

%%
